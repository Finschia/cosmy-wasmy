{
  "name": "cosmy-wasmy",
  "displayName": "cosmy wasmy",
  "description": "wibbly wobbly cosmy wasmy tool to interact with cosmwasm smart contracts",
  "version": "1.1.0",
  "preview": false,
  "publisher": "Spoorthi",
  "icon": "media/icon.png",
  "license": "SEE LICENSE IN LICENSE",
  "repository": "https://github.com/spoo-bar/cosmy-wasmy",
  "engines": {
    "vscode": "^1.67.0"
  },
  "categories": [
    "Testing",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "Cosmos",
    "Cosmwasm",
    "Juno",
    "Smart Contract",
    "Archway",
    "Chihuahua"
  ],
  "activationEvents": [
    "onView:account",
    "onView:contract",
    "onView:query",
    "onView:execute",
    "onView:sign",
    "onLanguage:rust",
    "onNotebook:cw-notebook"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cosmy-wasmy.addAccount",
        "title": "Add Account",
        "category": "Cosmy Wasmy",
        "icon": "$(add)"
      },
      {
        "command": "cosmy-wasmy.requestFunds",
        "title": "Request Funds",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account",
        "icon": {
          "light": "media/icons/light/fund.svg",
          "dark": "media/icons/dark/fund.svg"
        }
      },
      {
        "command": "cosmy-wasmy.openInExplorer",
        "title": "Open In Explorer",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account",
        "icon": "$(link-external)"
      },
      {
        "command": "cosmy-wasmy.copyAddress",
        "title": "Copy Address",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account || viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.copyMnemonic",
        "title": "Copy Mnemonic",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account"
      },
      {
        "command": "cosmy-wasmy.deleteAccount",
        "title": "Delete Account",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account"
      },
      {
        "command": "cosmy-wasmy.refreshAccount",
        "title": "Refresh Account View",
        "category": "Cosmy Wasmy",
        "icon": "$(refresh)"
      },
      {
        "command": "cosmy-wasmy.addContract",
        "title": "Import Contract",
        "category": "Cosmy Wasmy",
        "icon": "$(add)"
      },
      {
        "command": "cosmy-wasmy.deleteContract",
        "title": "Delete Contract",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.updateContractAdmin",
        "title": "Update Admin",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.clearContractAdmin",
        "title": "Clear Admin",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.reloadConfig",
        "title": "Reload Chain Config",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.resetData",
        "title": "Reset Data",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.build",
        "title": "Build",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.runUnitTests",
        "title": "Run Unit Tests",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.optimizeContract",
        "title": "Optimize Contract",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.generateSchema",
        "title": "Generate Schema",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.setupDevEnv",
        "title": "Setup Dev Environment",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.upload",
        "title": "Upload contract",
        "category": "Cosmy Wasmy",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "cosmy-wasmy.history",
        "title": "Show Cosmwasm History",
        "category": "Cosmy Wasmy",
        "icon": "$(history)"
      },
      {
        "command": "cosmy-wasmy.export",
        "title": "Export accounts, contracts and history as JSON",
        "category": "Cosmy Wasmy",
        "shortTitle": "Export Cosmy Wasmy data"
      },
      {
        "command": "cosmy-wasmy.addComments",
        "title": "Add comments/notes for the contract",
        "category": "Cosmy Wasmy",
        "icon": "$(comment)",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.queryCosmwasm",
        "title": "Run Query",
        "category": "Cosmy Wasmy",
        "enablement": "resourceLangId == json"
      },
      {
        "command": "cosmy-wasmy.execCosmwasm",
        "title": "Execute Tx",
        "category": "Cosmy Wasmy",
        "enablement": "resourceLangId == json"
      }
    ],
    "configuration": [
      {
        "title": "Cosmy Wasmy",
        "properties": {
          "cosmywasmy.chainConfigName": {
            "type": "string",
            "markdownDescription": "Used to select which of the Chain configs in `#cosmywasmy.chains#` is to be used in this workspace",
            "scope": "resource",
            "order": 0,
            "default": "Juno UNI-3 testnet",
            "deprecationMessage": "This property is not used anymore in fetching the workspace chain config. Click on the Status bar item to select the chain config you require."
          },
          "cosmywasmy.chains": {
            "type": "array",
            "markdownDescription": "List of chain configs",
            "scope": "application",
            "order": 1,
            "minItems": 1,
            "editPresentation": "multilineText",
            "items": {
              "type": "object",
              "title": "Chain Info",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "User friendly name for the saved network config. Use as input to `cosmywasmy.chainConfigName` to select this config to be used in the workspace."
                },
                "chainId": {
                  "type": "string",
                  "description": "Chain ID"
                },
                "chainEnvironment": {
                  "type": "string",
                  "description": "Is the chain localnet, testnet or (god forbid 😨) mainnet",
                  "enum": [
                    "localnet",
                    "testnet",
                    "mainnet"
                  ],
                  "enumDescriptions": [
                    "The chain is running locally on your system",
                    "The chain is a testnet chain",
                    "The chain is mainnet. DO NOT CONNECT MAINNETS to the extension unless you are super sure you know what you are doing. The extension saves the seed phrase in plain text."
                  ],
                  "default": "testnet"
                },
                "addressPrefix": {
                  "type": "string",
                  "description": "Prefix used by the chain"
                },
                "rpcEndpoint": {
                  "type": "string",
                  "description": "RPC address and port where the chain RPC server listens on"
                },
                "defaultGasPrice": {
                  "type": "string",
                  "description": "default amount of gas to be used as the gas limit for a transaction."
                },
                "chainDenom": {
                  "type": "string",
                  "description": "the micro denom used to pay for gas and to track account balance"
                },
                "faucetEndpoint": {
                  "type": "string",
                  "description": "Faucet address and port to request funds"
                },
                "accountExplorerLink": {
                  "type": "string",
                  "description": "Block explorer url which includes '${accountAddress}' text to generate account url",
                  "examples": [
                    "https://testnet.mintscan.io/juno-testnet/account/${accountAddress}"
                  ]
                },
                "txExplorerLink": {
                  "type": "string",
                  "description": "Block explorer url which includes '${txHash}' text to generate tx url",
                  "examples": [
                    "https://testnet.mintscan.io/juno-testnet/txs/${txHash}"
                  ]
                }
              },
              "required": [
                "configName",
                "chainId",
                "chainEnvironment",
                "addressPrefix",
                "rpcEndpoint",
                "defaultGasPrice",
                "chainDenom"
              ]
            },
            "default": [
              {
                "configName": "Juno UNI-3",
                "chainId": "uni-3",
                "chainEnvironment": "testnet",
                "addressPrefix": "juno",
                "rpcEndpoint": "https://rpc.uni.juno.deuslabs.fi",
                "defaultGasPrice": "0.025",
                "chainDenom": "ujunox",
                "accountExplorerLink": "https://testnet.mintscan.io/juno-testnet/account/${accountAddress}",
                "txExplorerLink": "https://testnet.mintscan.io/juno-testnet/txs/${txHash}"
              },
              {
                "configName": "Juno",
                "chainId": "testing",
                "chainEnvironment": "localnet",
                "addressPrefix": "juno",
                "rpcEndpoint": "http://localhost:26657",
                "defaultGasPrice": "0.025",
                "chainDenom": "ujunox",
                "faucetEndpoint": "http://localhost:8000"
              },
              {
                "configName": "Osmosis test-4",
                "chainId": "osmo-test-4",
                "chainEnvironment": "testnet",
                "addressPrefix": "osmo",
                "rpcEndpoint": "https://rpc-test.osmosis.zone",
                "defaultGasPrice": "0.025",
                "chainDenom": "uosmo",
                "accountExplorerLink": "https://testnet.mintscan.io/osmosis-testnet/account/${accountAddress}",
                "txExplorerLink": "https://testnet.mintscan.io/osmosis-testnet/txs/${txHash}"
              },
              {
                "configName": "Osmosis",
                "chainId": "localosmosis",
                "chainEnvironment": "localnet",
                "addressPrefix": "osmo",
                "rpcEndpoint": "http://localhost:26657",
                "defaultGasPrice": "0.025",
                "chainDenom": "uosmo"
              },
              {
                "configName": "Archway - Constantine-1",
                "chainId": "constantine-1",
                "chainEnvironment": "testnet",
                "addressPrefix": "archway",
                "rpcEndpoint": "https://rpc.constantine-1.archway.tech/",
                "defaultGasPrice": "0.025",
                "chainDenom": "const",
                "accountExplorerLink": "https://explorer.constantine-1.archway.tech/account/${accountAddress}",
                "txExplorerLink": "https://explorer.constantine-1.archway.tech/transactions/${txHash}"
              }
            ]
          },
          "cosmywasmy.contractSortOrder": {
            "type": "string",
            "enum": [
              "Alphabetical",
              "CodeId",
              "None"
            ],
            "enumDescriptions": [
              "Sort the Smart Contracts alphabetically by their label",
              "Sort the Smart Contracts by the Code ID",
              "No explicit sorting - Maintains the order the contracts were imported in"
            ],
            "order": 2,
            "default": "None",
            "description": "Controls the sorting order of the Smart Contracts in the Contract view",
            "scope": "resource"
          },
          "cosmywasmy.cosmwasmResponseView": {
            "type": "string",
            "enum": [
              "NewFile",
              "Terminal"
            ],
            "enumDescriptions": [
              "Open a new dummy doc with response",
              "A seperate output channel by Cosmy Wasmy in the Output view"
            ],
            "order": 3,
            "default": "Terminal",
            "description": "Controls where the smart contract interactions should be displayed",
            "scope": "resource"
          },
          "cosmywasmy.maxHistoryStored": {
            "type": "number",
            "markdownDescription": "Controls the latest number of queries and txs kept in history for easy re-execution. If set to `0` the feature is disabled and nothing is stored.",
            "order": 4,
            "default": 20,
            "minimum": 0,
            "maximum": 500,
            "scope": "resource"
          },
          "cosmywasmy.openTxExplorerInVscode": {
            "type": "boolean",
            "markdownDescription": "If this setting is set, and the current chain config has `txExplorerLink` value set, on the successful execution of a msg, the tx explorer link opens automatically within vscode in simple browser.",
            "order": 5,
            "default": false,
            "scope": "resource"
          }
        }
      }
    ],
    "keybindings": [
      {
        "command": "cosmy-wasmy.build",
        "key": "ctrl+shift+b"
      },
      {
        "command": "cosmy-wasmy.runUnitTests",
        "key": "ctrl+shift+t"
      },
      {
        "command": "cosmy-wasmy.optimizeContract",
        "key": "ctrl+shift+o"
      },
      {
        "command": "cosmy-wasmy.generateSchema",
        "key": "ctrl+shift+g"
      },
      {
        "command": "cosmy-wasmy.upload",
        "key": "ctrl+shift+u"
      },
      {
        "command": "cosmy-wasmy.history",
        "key": "ctrl+shift+a"
      }
    ],
    "languages": [
      {
        "id": "cw-notebook",
        "aliases": [
          "CW Notebook"
        ],
        "extensions": [
          ".cwnotebook"
        ],
        "icon": {
          "light": "media/icon.svg",
          "dark": "media/icon.svg"
        }
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm"
        }
      ],
      "editor/context": [
        {
          "command": "cosmy-wasmy.queryCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.execCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.queryCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.execCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        }
      ],
      "editor/title/context": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm"
        }
      ],
      "view/title": [
        {
          "command": "cosmy-wasmy.addAccount",
          "when": "view == account",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.refreshAccount",
          "when": "view == account",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.addContract",
          "when": "view == contract",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.history",
          "when": "view == query || view == execute",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.upload",
          "when": "view == contract",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "cosmy-wasmy.requestFunds",
          "when": "view == account && showRequestFunds",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.openInExplorer",
          "when": "view == account && showOpenInExplorer",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.copyAddress",
          "when": "view == account || view == contract",
          "group": "cutcopypaste"
        },
        {
          "command": "cosmy-wasmy.copyMnemonic",
          "when": "view == account",
          "group": "cutcopypaste"
        },
        {
          "command": "cosmy-wasmy.addComments",
          "when": "view == contract",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.updateContractAdmin",
          "when": "view == contract",
          "group": "modify"
        },
        {
          "command": "cosmy-wasmy.clearContractAdmin",
          "when": "view == contract",
          "group": "modify"
        },
        {
          "command": "cosmy-wasmy.deleteAccount",
          "when": "view == account",
          "group": "z_delete"
        },
        {
          "command": "cosmy-wasmy.deleteContract",
          "when": "view == contract",
          "group": "z_delete"
        }
      ]
    },
    "notebooks": [
      {
        "type": "cw-notebook",
        "displayName": "cw-notebook",
        "selector": [
          {
            "filenamePattern": "*.cwnotebook"
          }
        ]
      }
    ],
    "snippets": [
      {
        "language": "rust",
        "path": "./snippets.json"
      }
    ],
    "views": {
      "cosmy-wasmy": [
        {
          "id": "account",
          "name": "Account",
          "type": "tree",
          "visibility": "visible"
        },
        {
          "id": "contract",
          "name": "Contract",
          "type": "tree",
          "visibility": "visible"
        },
        {
          "id": "query",
          "name": "Query",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "execute",
          "name": "Execute",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "sign",
          "name": "Sign",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "migrate",
          "name": "Migrate",
          "type": "webview",
          "visibility": "collapsed"
        },
        {
          "id": "intialize",
          "name": "Initialize",
          "type": "webview",
          "visibility": "collapsed"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cosmy-wasmy",
          "title": "Cosmy Wasmy",
          "icon": "media/icon.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "account",
        "contents": "⚠️ Looks like there are no accounts set up. \n [Add an account](command:cosmy-wasmy.addAccount)"
      },
      {
        "view": "contract",
        "contents": "⚠️ Looks like there are no imported contracts. \n [Import a contract](command:cosmy-wasmy.addContract)"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.1",
    "@types/node": "14.x",
    "@types/vscode": "^1.67.0",
    "@typescript-eslint/eslint-plugin": "^5.21.0",
    "@typescript-eslint/parser": "^5.21.0",
    "@vscode/test-electron": "^2.1.3",
    "eslint": "^8.14.0",
    "glob": "^8.0.1",
    "mocha": "^9.2.2",
    "ts-loader": "^9.2.8",
    "typescript": "^4.6.4",
    "webpack": "^5.70.0",
    "webpack-cli": "^4.9.2"
  },
  "dependencies": {
    "@cosmjs/amino": "^0.28.4",
    "@cosmjs/cosmwasm-stargate": "^0.28.4",
    "@cosmjs/faucet-client": "^0.28.4",
    "@cosmjs/launchpad": "^0.27.1",
    "@cosmjs/proto-signing": "^0.28.4",
    "clipboardy": "^3.0.0"
  }
}