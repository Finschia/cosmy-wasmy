{
  "name": "cosmy-wasmy",
  "displayName": "cosmy wasmy",
  "description": "wibbly wobbly cosmy wasmy tool to interact with cosmwasm smart contracts",
  "version": "1.0.0",
  "preview": false,
  "publisher": "Spoorthi",
  "icon": "media/icon.png",
  "license": "SEE LICENSE IN LICENSE",
  "repository": "https://github.com/spoo-bar/cosmy-wasmy",
  "engines": {
    "vscode": "^1.67.0"
  },
  "categories": [
    "Testing",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "Cosmos",
    "Cosmwasm",
    "Juno",
    "Smart Contract",
    "Archway",
    "Chihuahua"
  ],
  "activationEvents": [
    "onView:account",
    "onView:contract",
    "onView:query",
    "onView:execute",
    "onView:sign",
    "onLanguage:rust"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "cosmy-wasmy.addAccount",
        "title": "Add Account",
        "icon": "$(add)"
      },
      {
        "command": "cosmy-wasmy.requestFunds",
        "title": "Request Funds",
        "enablement": "viewItem == account",
        "icon": {
          "light": "media/icons/light/fund.svg",
          "dark": "media/icons/dark/fund.svg"
        }
      },
      {
        "command": "cosmy-wasmy.openInExplorer",
        "title": "Open In Explorer",
        "enablement": "viewItem == account",
        "icon": "$(link-external)"
      },
      {
        "command": "cosmy-wasmy.copyAddress",
        "title": "Copy Address",
        "enablement": "viewItem == account || viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.copyMnemonic",
        "title": "Copy Mnemonic",
        "enablement": "viewItem == account"
      },
      {
        "command": "cosmy-wasmy.deleteAccount",
        "title": "Delete Account",
        "enablement": "viewItem == account"
      },
      {
        "command": "cosmy-wasmy.addContract",
        "title": "Import Contract",
        "icon": "$(add)"
      },
      {
        "command": "cosmy-wasmy.deleteContract",
        "title": "Delete Contract",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.updateContractAdmin",
        "title": "Update Admin",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.clearContractAdmin",
        "title": "Clear Admin",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.reloadConfig",
        "title": "Reload Chain Config"
      },
      {
        "command": "cosmy-wasmy.resetData",
        "title": "Reset Data"
      },
      {
        "command": "cosmy-wasmy.build",
        "title": "Build"
      },
      {
        "command": "cosmy-wasmy.runUnitTests",
        "title": "Run Unit Tests"
      },
      {
        "command": "cosmy-wasmy.optimizeContract",
        "title": "Optimize Contract"
      },
      {
        "command": "cosmy-wasmy.generateSchema",
        "title": "Generate Schema"
      },
      {
        "command": "cosmy-wasmy.setupDevEnv",
        "title": "Setup Dev Environment"
      },
      {
        "command": "cosmy-wasmy.upload",
        "title": "Upload contract",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "cosmy-wasmy.history",
        "title": "Show Cosmwasm History",
        "icon": "$(history)"
      },
      {
        "command": "cosmy-wasmy.export",
        "title": "Export accounts, contracts and history as JSON",
        "shortTitle": "Export Cosmy Wasmy data"
      },
      {
        "command": "cosmy-wasmy.addComments",
        "title": "Add comments/notes for the contract",
        "icon": "$(comment)",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.queryCosmwasm",
        "title": "query",
        "enablement": "resourceLangId == json"
      },
      {
        "command": "cosmy-wasmy.execCosmwasm",
        "title": "tx",
        "enablement": "resourceLangId == json"
      }
    ],
    "configuration": [
      {
        "title": "Cosmy Wasmy",
        "properties": {
          "cosmywasmy.chainConfigName": {
            "type": "string",
            "markdownDescription": "Used to select which of the Chain configs in `#cosmywasmy.chains#` is to be used in this workspace",
            "scope": "resource",
            "order": 0,
            "default": "Juno UNI-3 testnet"
          },
          "cosmywasmy.chains": {
            "type": "array",
            "markdownDescription": "List of chain configs",
            "scope": "application",
            "order": 1,
            "minItems": 1,
            "editPresentation": "multilineText",
            "items": {
              "type": "object",
              "title": "Chain Info",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "User friendly name for the saved network config. Use as input to `cosmywasmy.chainConfigName` to select this config to be used in the workspace."
                },
                "chainId": {
                  "type": "string",
                  "description": "Chain ID"
                },
                "addressPrefix": {
                  "type": "string",
                  "description": "Prefix used by the chain"
                },
                "rpcEndpoint": {
                  "type": "string",
                  "description": "RPC address and port where the chain RPC server listens on"
                },
                "defaultGasPrice": {
                  "type": "string",
                  "description": "default amount of gas to be used as the gas limit for a transaction."
                },
                "chainDenom": {
                  "type": "string",
                  "description": "the micro denom used to pay for gas and to track account balance"
                },
                "faucetEndpoint": {
                  "type": "string",
                  "description": "Faucet address and port to request funds"
                },
                "accountExplorerLink": {
                  "type": "string",
                  "description": "Block explorer url which includes '${accountAddress}' text to generate account url",
                  "examples": [
                    "https://testnet.mintscan.io/juno-testnet/account/${accountAddress}"
                  ]
                }
              },
              "required": [
                "configName",
                "chainId",
                "addressPrefix",
                "rpcEndpoint",
                "defaultGasPrice",
                "chainDenom"
              ]
            },
            "default": [
              {
                "configName": "Juno UNI-3 testnet",
                "chainId": "uni-3",
                "addressPrefix": "juno",
                "rpcEndpoint": "https://rpc.uni.juno.deuslabs.fi",
                "defaultGasPrice": "0.025",
                "chainDenom": "ujunox",
                "accountExplorerLink": "https://testnet.mintscan.io/juno-testnet/account/${accountAddress}"
              },
              {
                "configName": "Localnet - Juno",
                "chainId": "testing",
                "addressPrefix": "juno",
                "rpcEndpoint": "http://localhost:26657",
                "defaultGasPrice": "0.025",
                "chainDenom": "ujunox",
                "faucetEndpoint": "http://localhost:8000"
              },
              {
                "configName": "Testnet - Osmosis",
                "chainId": "osmo-test-4",
                "addressPrefix": "osmo",
                "rpcEndpoint": "https://rpc-test.osmosis.zone",
                "defaultGasPrice": "0.025",
                "chainDenom": "uosmo",
                "accountExplorerLink": "https://testnet.mintscan.io/osmosis-testnet/account/${accountAddress}"
              },
              {
                "configName": "Localnet - Osmosis",
                "chainId": "localosmosis",
                "addressPrefix": "osmo",
                "rpcEndpoint": "http://localhost:26657",
                "defaultGasPrice": "0.025",
                "chainDenom": "uosmo"
              }
            ]
          },
          "cosmywasmy.contractSortOrder": {
            "type": "string",
            "enum": [
              "Alphabetical",
              "CodeId",
              "None"
            ],
            "enumDescriptions": [
              "Sort the Smart Contracts alphabetically by their label",
              "Sort the Smart Contracts by the Code ID",
              "No explicit sorting - Maintains the order the contracts were imported in"
            ],
            "order": 2,
            "default": "None",
            "description": "Controls the sorting order of the Smart Contracts in the Contract view",
            "scope": "resource"
          },
          "cosmywasmy.cosmwasmResponseView": {
            "type": "string",
            "enum": [
              "NewFile",
              "Terminal"
            ],
            "enumDescriptions": [
              "Open a new dummy doc with response",
              "A seperate output channel by Cosmy Wasmy in the Output view"
            ],
            "order": 3,
            "default": "Terminal",
            "description": "Controls where the smart contract interactions should be displayed",
            "scope": "resource"
          },
          "cosmywasmy.maxHistoryStored": {
            "type": "number",
            "markdownDescription": "Controls the latest number of queries and txs kept in history for easy re-execution. If set to `0` the feature is disabled and nothing is stored.",
            "order": 4,
            "default": 20,
            "minimum": 0,
            "maximum": 500,
            "scope": "resource"
          }
        }
      }
    ],
    "keybindings": [
      {
        "command": "cosmy-wasmy.build",
        "key": "ctrl+shift+b"
      },
      {
        "command": "cosmy-wasmy.runUnitTests",
        "key": "ctrl+shift+t"
      },
      {
        "command": "cosmy-wasmy.optimizeContract",
        "key": "ctrl+shift+o"
      },
      {
        "command": "cosmy-wasmy.generateSchema",
        "key": "ctrl+shift+g"
      },
      {
        "command": "cosmy-wasmy.upload",
        "key": "ctrl+shift+u"
      },
      {
        "command": "cosmy-wasmy.history",
        "key": "ctrl+shift+a"
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm"
        }
      ],
      "editor/title": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.queryCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.execCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        }
      ],
      "editor/title/context": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm"
        }
      ],
      "view/title": [
        {
          "command": "cosmy-wasmy.addAccount",
          "when": "view == account",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.addContract",
          "when": "view == contract",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.history",
          "when": "view == query || view == execute",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.upload",
          "when": "view == contract",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "cosmy-wasmy.requestFunds",
          "when": "view == account && showRequestFunds",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.openInExplorer",
          "when": "view == account && showOpenInExplorer",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.copyAddress",
          "when": "view == account || view == contract",
          "group": "cutcopypaste"
        },
        {
          "command": "cosmy-wasmy.copyMnemonic",
          "when": "view == account",
          "group": "cutcopypaste"
        },
        {
          "command": "cosmy-wasmy.addComments",
          "when": "view == contract",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.updateContractAdmin",
          "when": "view == contract",
          "group": "modify"
        },
        {
          "command": "cosmy-wasmy.clearContractAdmin",
          "when": "view == contract",
          "group": "modify"
        },
        {
          "command": "cosmy-wasmy.deleteAccount",
          "when": "view == account",
          "group": "z_delete"
        },
        {
          "command": "cosmy-wasmy.deleteContract",
          "when": "view == contract",
          "group": "z_delete"
        }
      ]
    },
    "snippets": [
      {
        "language": "rust",
        "path": "./snippets.json"
      }
    ],
    "views": {
      "cosmy-wasmy": [
        {
          "id": "account",
          "name": "Account",
          "type": "tree",
          "visibility": "visible"
        },
        {
          "id": "contract",
          "name": "Contract",
          "type": "tree",
          "visibility": "visible"
        },
        {
          "id": "query",
          "name": "Query",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "execute",
          "name": "Execute",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "sign",
          "name": "Sign",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "migrate",
          "name": "Migrate",
          "type": "webview",
          "visibility": "collapsed"
        },
        {
          "id": "intialize",
          "name": "Initialize",
          "type": "webview",
          "visibility": "collapsed"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cosmy-wasmy",
          "title": "Cosmy Wasmy",
          "icon": "media/icon.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "account",
        "contents": "⚠️ Looks like there are no accounts set up. \n [Add an account](command:cosmy-wasmy.addAccount)"
      },
      {
        "view": "contract",
        "contents": "⚠️ Looks like there are no imported contracts. \n [Import a contract](command:cosmy-wasmy.addContract)"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.1",
    "@types/node": "14.x",
    "@types/vscode": "^1.67.0",
    "@typescript-eslint/eslint-plugin": "^5.21.0",
    "@typescript-eslint/parser": "^5.21.0",
    "@vscode/test-electron": "^2.1.3",
    "eslint": "^8.14.0",
    "glob": "^8.0.1",
    "mocha": "^9.2.2",
    "ts-loader": "^9.2.8",
    "typescript": "^4.6.4",
    "webpack": "^5.70.0",
    "webpack-cli": "^4.9.2"
  },
  "dependencies": {
    "@cosmjs/amino": "^0.28.4",
    "@cosmjs/cosmwasm-stargate": "^0.28.4",
    "@cosmjs/faucet-client": "^0.28.4",
    "@cosmjs/launchpad": "^0.27.1",
    "@cosmjs/proto-signing": "^0.28.4",
    "clipboardy": "^3.0.0"
  }
}