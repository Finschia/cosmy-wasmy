{
  "name": "cosmy-wasmy",
  "displayName": "cosmy wasmy",
  "description": "wibbly wobbly cosmy wasmy tool to interact with cosmwasm smart contracts",
  "version": "1.2.1",
  "preview": false,
  "publisher": "Spoorthi",
  "icon": "media/icon.png",
  "license": "SEE LICENSE IN LICENSE",
  "repository": "https://github.com/spoo-bar/cosmy-wasmy",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Testing",
    "Snippets",
    "Other"
  ],
  "keywords": [
    "Cosmos",
    "Cosmwasm",
    "Juno",
    "Smart Contract",
    "Archway",
    "Chihuahua"
  ],
  "activationEvents": [
    "onView:account",
    "onView:contract",
    "onView:query",
    "onView:execute",
    "onView:sign",
    "onLanguage:rust",
    "onNotebook:cw-notebook"
  ],
  "main": "./dist/extension.js",
  "l10n": "./l10n",
  "contributes": {
    "commands": [
      {
        "command": "cosmy-wasmy.addAccount",
        "title": "%cosmy-wasmy.addAccount.title%",
        "category": "Cosmy Wasmy",
        "icon": "$(add)"
      },
      {
        "command": "cosmy-wasmy.requestFunds",
        "title": "%cosmy-wasmy.requestFunds.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account",
        "icon": {
          "light": "media/icons/light/fund.svg",
          "dark": "media/icons/dark/fund.svg"
        }
      },
      {
        "command": "cosmy-wasmy.openInExplorer",
        "title": "%cosmy-wasmy.openInExplorer.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account",
        "icon": "$(link-external)"
      },
      {
        "command": "cosmy-wasmy.copyAddress",
        "title": "%cosmy-wasmy.copyAddress.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account || viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.copyMnemonic",
        "title": "%cosmy-wasmy.copyMnemonic.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account"
      },
      {
        "command": "cosmy-wasmy.deleteAccount",
        "title": "%cosmy-wasmy.deleteAccount.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == account"
      },
      {
        "command": "cosmy-wasmy.refreshAccount",
        "title": "%cosmy-wasmy.refreshAccount.title%",
        "category": "Cosmy Wasmy",
        "icon": "$(refresh)"
      },
      {
        "command": "cosmy-wasmy.addContract",
        "title": "%cosmy-wasmy.addContract.title%",
        "category": "Cosmy Wasmy",
        "icon": "$(add)"
      },
      {
        "command": "cosmy-wasmy.deleteContract",
        "title": "%cosmy-wasmy.deleteContract.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.updateContractAdmin",
        "title": "%cosmy-wasmy.updateContractAdmin.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.clearContractAdmin",
        "title": "%cosmy-wasmy.clearContractAdmin.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.getContractChecksum",
        "title": "%cosmy-wasmy.getContractChecksum.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.downloadContractBinary",
        "title": "%cosmy-wasmy.downloadContractBinary.title%",
        "category": "Cosmy Wasmy",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.reloadConfig",
        "title": "%cosmy-wasmy.reloadConfig.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.resetData",
        "title": "%cosmy-wasmy.resetData.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.build",
        "title": "%cosmy-wasmy.build.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.runUnitTests",
        "title": "%cosmy-wasmy.runUnitTests.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.optimizeContract",
        "title": "%cosmy-wasmy.optimizeContract.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.generateSchema",
        "title": "%cosmy-wasmy.generateSchema.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.setupDevEnv",
        "title": "%cosmy-wasmy.setupDevEnv.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.upload",
        "title": "%cosmy-wasmy.upload.title%",
        "category": "Cosmy Wasmy",
        "icon": "$(cloud-upload)"
      },
      {
        "command": "cosmy-wasmy.wasmInteract",
        "title": "%cosmy-wasmy.wasmInteract.title%",
        "category": "Cosmy Wasmy",
        "icon": "$(server-process)"
      },
      {
        "command": "cosmy-wasmy.history",
        "title": "%cosmy-wasmy.history.title%",
        "category": "Cosmy Wasmy",
        "icon": "$(history)"
      },
      {
        "command": "cosmy-wasmy.export",
        "title": "%cosmy-wasmy.export.title%",
        "category": "Cosmy Wasmy",
        "shortTitle": "Export Cosmy Wasmy data"
      },
      {
        "command": "cosmy-wasmy.addComments",
        "title": "%cosmy-wasmy.addComments.title%",
        "category": "Cosmy Wasmy",
        "icon": "$(comment)",
        "enablement": "viewItem == contract"
      },
      {
        "command": "cosmy-wasmy.queryCosmwasm",
        "title": "%cosmy-wasmy.queryCosmwasm.title%",
        "category": "Cosmy Wasmy",
        "enablement": "resourceLangId == json"
      },
      {
        "command": "cosmy-wasmy.execCosmwasm",
        "title": "%cosmy-wasmy.execCosmwasm.title%",
        "category": "Cosmy Wasmy",
        "enablement": "resourceLangId == json"
      },
      {
        "command": "cosmy-wasmy.beakerTomlSync",
        "title": "%cosmy-wasmy.beakerTomlSync.title%",
        "category": "Cosmy Wasmy"
      },
      {
        "command": "cosmy-wasmy.createCwNotebook",
        "title": "%cosmy-wasmy.createCwNotebook.title%",
        "category": "Cosmy Wasmy"
      }
    ],
    "configuration": [
      {
        "title": "Cosmy Wasmy",
        "properties": {
          "cosmywasmy.chainConfigName": {
            "type": "string",
            "markdownDescription": "%cosmywasmy.chainConfigName.desc%",
            "scope": "resource",
            "order": 0,
            "default": "Juno UNI-5 testnet",
            "deprecationMessage": "%cosmywasmy.chainConfigName.deprecationDesc%"
          },
          "cosmywasmy.chains": {
            "type": "array",
            "markdownDescription": "%cosmywasmy.chains.desc%",
            "scope": "application",
            "order": 1,
            "minItems": 1,
            "editPresentation": "multilineText",
            "items": {
              "type": "object",
              "title": "%cosmywasmy.chains.items.title%",
              "properties": {
                "configName": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.configName.desc%"
                },
                "chainId": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.chainId.desc%"
                },
                "chainEnvironment": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.chainEnvironment.desc%",
                  "enum": [
                    "localnet",
                    "testnet",
                    "mainnet"
                  ],
                  "enumDescriptions": [
                    "%cosmywasmy.chains.items.chainEnvironment.localnet.desc%",
                    "%cosmywasmy.chains.items.chainEnvironment.testnet.desc%",
                    "%cosmywasmy.chains.items.chainEnvironment.mainnet.desc%"
                  ],
                  "default": "testnet"
                },
                "addressPrefix": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.addressPrefix.desc%"
                },
                "rpcEndpoint": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.rpcEndpoint.desc%"
                },
                "defaultGasPrice": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.defaultGasPrice.desc%"
                },
                "chainDenom": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.chainDenom.desc%"
                },
                "faucetEndpoint": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.faucetEndpoint.desc%"
                },
                "accountExplorerLink": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.accountExplorerLink.desc%",
                  "examples": [
                    "https://testnet.mintscan.io/juno-testnet/account/${accountAddress}"
                  ]
                },
                "txExplorerLink": {
                  "type": "string",
                  "description": "%cosmywasmy.chains.items.txExplorerLink.desc%",
                  "examples": [
                    "https://testnet.mintscan.io/juno-testnet/txs/${txHash}"
                  ]
                }
              },
              "required": [
                "configName",
                "chainId",
                "chainEnvironment",
                "addressPrefix",
                "rpcEndpoint",
                "defaultGasPrice",
                "chainDenom"
              ]
            },
            "default": [
              {
                "configName": "Juno uni-5",
                "chainId": "uni-5",
                "chainEnvironment": "testnet",
                "addressPrefix": "juno",
                "rpcEndpoint": "https://rpc.uni.junonetwork.io/",
                "defaultGasPrice": "0.025",
                "chainDenom": "ujunox",
                "accountExplorerLink": "https://testnet.mintscan.io/juno-testnet/account/${accountAddress}",
                "txExplorerLink": "https://testnet.mintscan.io/juno-testnet/txs/${txHash}"
              },
              {
                "configName": "Juno",
                "chainId": "testing",
                "chainEnvironment": "localnet",
                "addressPrefix": "juno",
                "rpcEndpoint": "http://localhost:26657",
                "defaultGasPrice": "0.025",
                "chainDenom": "ujunox",
                "faucetEndpoint": "http://localhost:8000"
              },
              {
                "configName": "Osmosis test-4",
                "chainId": "osmo-test-4",
                "chainEnvironment": "testnet",
                "addressPrefix": "osmo",
                "rpcEndpoint": "https://rpc-test.osmosis.zone",
                "defaultGasPrice": "0.025",
                "chainDenom": "uosmo",
                "accountExplorerLink": "https://testnet.mintscan.io/osmosis-testnet/account/${accountAddress}",
                "txExplorerLink": "https://testnet.mintscan.io/osmosis-testnet/txs/${txHash}"
              },
              {
                "configName": "Osmosis",
                "chainId": "localosmosis",
                "chainEnvironment": "localnet",
                "addressPrefix": "osmo",
                "rpcEndpoint": "http://localhost:26657",
                "defaultGasPrice": "0.025",
                "chainDenom": "uosmo"
              },
              {
                "configName": "Archway - Constantine-1",
                "chainId": "constantine-1",
                "chainEnvironment": "testnet",
                "addressPrefix": "archway",
                "rpcEndpoint": "https://rpc.constantine-1.archway.tech/",
                "defaultGasPrice": "0.025",
                "chainDenom": "const",
                "accountExplorerLink": "https://explorer.constantine-1.archway.tech/account/${accountAddress}",
                "txExplorerLink": "https://explorer.constantine-1.archway.tech/transactions/${txHash}"
              }
            ]
          },
          "cosmywasmy.contractSortOrder": {
            "type": "string",
            "enum": [
              "Alphabetical",
              "CodeId",
              "None"
            ],
            "enumDescriptions": [
              "%cosmywasmy.contractSortOrder.alphabetical.desc%",
              "%cosmywasmy.contractSortOrder.codeId.desc%",
              "%cosmywasmy.contractSortOrder.none.desc%"
            ],
            "order": 2,
            "default": "None",
            "description": "%cosmywasmy.contractSortOrder.desc%",
            "scope": "resource"
          },
          "cosmywasmy.cosmwasmResponseView": {
            "type": "string",
            "enum": [
              "NewFile",
              "Terminal"
            ],
            "enumDescriptions": [
              "%cosmywasmy.cosmwasmResponseView.newFile.desc%",
              "%cosmywasmy.cosmwasmResponseView.terminal.desc%"
            ],
            "order": 3,
            "default": "Terminal",
            "description": "%cosmywasmy.cosmwasmResponseView.desc%",
            "scope": "resource"
          },
          "cosmywasmy.maxHistoryStored": {
            "type": "number",
            "markdownDescription": "%cosmywasmy.maxHistoryStored.desc%",
            "order": 4,
            "default": 20,
            "minimum": 0,
            "maximum": 500,
            "scope": "resource"
          },
          "cosmywasmy.openTxExplorerInVscode": {
            "type": "boolean",
            "markdownDescription": "%cosmywasmy.openTxExplorerInVscode.desc%",
            "order": 5,
            "default": false,
            "scope": "resource"
          },
          "beaker.autosync": {
            "type": "boolean",
            "markdownDescription": "%beaker.autosync.desc%",
            "default": true,
            "scope": "machine"
          }
        }
      }
    ],
    "keybindings": [
      {
        "command": "cosmy-wasmy.build",
        "key": "ctrl+shift+b"
      },
      {
        "command": "cosmy-wasmy.runUnitTests",
        "key": "ctrl+shift+t"
      },
      {
        "command": "cosmy-wasmy.optimizeContract",
        "key": "ctrl+shift+o"
      },
      {
        "command": "cosmy-wasmy.generateSchema",
        "key": "ctrl+shift+g"
      },
      {
        "command": "cosmy-wasmy.upload",
        "key": "ctrl+shift+u"
      },
      {
        "command": "cosmy-wasmy.history",
        "key": "ctrl+shift+a"
      }
    ],
    "languages": [
      {
        "id": "cw-notebook",
        "aliases": [
          "CW Notebook"
        ],
        "extensions": [
          ".cwnotebook"
        ],
        "icon": {
          "light": "media/icon.svg",
          "dark": "media/icon.svg"
        }
      }
    ],
    "menus": {
      "explorer/context": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm"
        },
        {
          "command": "cosmy-wasmy.wasmInteract",
          "when": "resourceExtname == .wasm"
        },
        {
          "command": "cosmy-wasmy.beakerTomlSync",
          "when": "resourceFilename == Beaker.toml"
        }
      ],
      "editor/context": [
        {
          "command": "cosmy-wasmy.queryCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.execCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        }
      ],
      "editor/title": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.wasmInteract",
          "when": "resourceExtname == .wasm",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.queryCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.execCosmwasm",
          "when": "resourceLangId == json",
          "group": "navigation"
        }
      ],
      "editor/title/context": [
        {
          "command": "cosmy-wasmy.upload",
          "when": "resourceExtname == .wasm"
        }
      ],
      "view/title": [
        {
          "command": "cosmy-wasmy.addAccount",
          "when": "view == account",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.refreshAccount",
          "when": "view == account",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.addContract",
          "when": "view == contract",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.history",
          "when": "view == query || view == execute",
          "group": "navigation"
        },
        {
          "command": "cosmy-wasmy.upload",
          "when": "view == contract",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "cosmy-wasmy.requestFunds",
          "when": "view == account && showRequestFunds",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.openInExplorer",
          "when": "view == account && showOpenInExplorer",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.copyAddress",
          "when": "view == account || view == contract",
          "group": "cutcopypaste"
        },
        {
          "command": "cosmy-wasmy.copyMnemonic",
          "when": "view == account",
          "group": "cutcopypaste"
        },
        {
          "command": "cosmy-wasmy.addComments",
          "when": "view == contract",
          "group": "inline"
        },
        {
          "command": "cosmy-wasmy.updateContractAdmin",
          "when": "view == contract",
          "group": "modify"
        },
        {
          "command": "cosmy-wasmy.clearContractAdmin",
          "when": "view == contract",
          "group": "modify"
        },
        {
          "command": "cosmy-wasmy.getContractChecksum",
          "when": "view == contract",
          "group": "details"
        },
        {
          "command": "cosmy-wasmy.downloadContractBinary",
          "when": "view == contract",
          "group": "details"
        },
        {
          "command": "cosmy-wasmy.deleteAccount",
          "when": "view == account",
          "group": "z_delete"
        },
        {
          "command": "cosmy-wasmy.deleteContract",
          "when": "view == contract",
          "group": "z_delete"
        }
      ]
    },
    "notebooks": [
      {
        "type": "cw-notebook",
        "displayName": "cw-notebook",
        "selector": [
          {
            "filenamePattern": "*.cwnotebook"
          }
        ]
      }
    ],
    "snippets": [
      {
        "language": "rust",
        "path": "./snippets.json"
      }
    ],
    "views": {
      "cosmy-wasmy": [
        {
          "id": "account",
          "name": "Account",
          "type": "tree",
          "visibility": "visible"
        },
        {
          "id": "contract",
          "name": "Contract",
          "type": "tree",
          "visibility": "visible"
        },
        {
          "id": "query",
          "name": "Query",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "execute",
          "name": "Execute",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "sign",
          "name": "Sign",
          "type": "webview",
          "visibility": "visible"
        },
        {
          "id": "migrate",
          "name": "Migrate",
          "type": "webview",
          "visibility": "collapsed"
        },
        {
          "id": "intialize",
          "name": "Initialize",
          "type": "webview",
          "visibility": "collapsed"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "id": "cosmy-wasmy",
          "title": "Cosmy Wasmy",
          "icon": "media/icon.svg"
        }
      ]
    },
    "viewsWelcome": [
      {
        "view": "account",
        "contents": "%cosmywasmy.viewsWelcome.account.desc%"
      },
      {
        "view": "contract",
        "contents": "%cosmywasmy.viewsWelcome.contract.desc%"
      }
    ],
    "walkthroughs": [
      {
        "id": "cosmy-wasmy",
        "title": "Getting Started with Cosmy Wasmy",
        "description": "Discover how to use Cosmy Wasmy and what all it offers",
        "steps": [
          {
            "id": "openCWView",
            "title": "Open Cosmy Wasmy",
            "description": "Click on the Cosmy Wasmy logo in the Activity Bar/sidebar to open the extension",
            "completionEvents": [
              "onView:account"
            ],
            "media": {
              "image": "media/icon.png",
              "altText": "Cosmy Wasmy logo"
            }
          },
          {
            "id": "createKey",
            "title": "Add Account",
            "description": "Create a new key. You can import an existing seed phrase or generate a new one. \n[Add Account](command:cosmy-wasmy.addAccount)",
            "completionEvents": [
              "onCommand:cosmy-wasmy.addAccount"
            ],
            "media": {
              "image": "images/account.gif",
              "altText": "How to add a new account"
            }
          },
          {
            "id": "changeChain",
            "title": "Change Active Chain",
            "description": "Change the chain the current workspace is connected to. You can select the chain in the status bar below.\nThe chains are organized by localnet, testnet, mainnet and Beaker imported chain configs. \n[Change Chain Config](command:cosmy-wasmy.reloadConfig)",
            "completionEvents": [
              "onCommand:cosmy-wasmy.reloadConfig"
            ],
            "media": {
              "image": "images/status.png",
              "altText": "How to add a new account"
            }
          },
          {
            "id": "importContract",
            "title": "Import Contract",
            "description": "Import a contract which have already been deployed by their bech32 address. \n[Import Contract](command:cosmy-wasmy.addContract)",
            "completionEvents": [
              "onCommand:cosmy-wasmy.addContract"
            ],
            "media": {
              "image": "images/contract.gif",
              "altText": "How to import a contract"
            }
          },
          {
            "id": "executeContract",
            "title": "Execute Contract",
            "description": "Select a contract from the Contract view and an account from the Account view as currently active contract and account and input your execute json and click on ``Execute`` button to execute the contract tx.\nYou can also pass in funds if your contract requires any.\nThe response from the contract is shown in the Output channel and you can see the txHash in the notification.",
            "completionEvents": [
              "onView:execute"
            ],
            "media": {
              "image": "images/execute.gif",
              "altText": "How to execute a contract"
            }
          },
          {
            "id": "simulateContract",
            "title": "Simulate Contract",
            "description": "Right click on a wasm binary to get the option to simulate the binary in the Cosmwasm VM within vscode",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "images/simulate.gif",
              "altText": "How to simulate a contract in Cosmwasm virtual machine"
            }
          }
        ]
      },
      {
        "id": "cosmy-wasmy.accounts",
        "title": "Cosmy Wasmy: Accounts",
        "description": "Discover how to use Accounts in Cosmy Wasmy and what all it offers",
        "steps": [
          {
            "id": "cosmy-wasmy.accounts.addNew",
            "title": "Add account",
            "description": "Create a new key. You can import an existing seed phrase or generate a new one. \n[Add Account](command:cosmy-wasmy.addAccount)\n❗Ensure you are not using your mainnet seed phrases. The seed phrase is stored in plain text by vscode",
            "completionEvents": [
              "onCommand:cosmy-wasmy.addAccount"
            ],
            "media": {
              "image": "walkthrough/account/add.gif",
              "altText": "How to add a new account"
            }
          },
          {
            "id": "cosmy-wasmy.accounts.copyAddress",
            "title": "Copy account address",
            "description": "Right click on an account to get the option to copy the account address into your $(clippy) clipboard",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/account/copyAddr.gif",
              "altText": "How to copy an account address"
            }
          },
          {
            "id": "cosmy-wasmy.accounts.copyMnemonic",
            "title": "Copy account nnemonic",
            "description": "Right click on an account to get the option to copy the account seed phrase  into your $(clippy) clipboard",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/account/copySeed.gif",
              "altText": "How to copy an account seed phrase"
            }
          },
          {
            "id": "cosmy-wasmy.accounts.requestFunds",
            "title": "Request funds from faucet",
            "description": "If a faucet has been configured in the chain config, you will see the ``Request Funds`` icon next to the account. You can click on the button to request funds from the faucet",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/account/requestFunds.gif",
              "altText": "How to request funds from faucet"
            }
          },
          {
            "id": "cosmy-wasmy.accounts.deleteAccount",
            "title": "Delete account",
            "description": "Right click on an account to get the option to delete the account from the extension. \n❗Account is only removed from the Cosmy Wasmy vscode extension. The account and its state continues to persist on chain.",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/account/deleteAccount.gif",
              "altText": "How to delete an account from the extension"
            }
          },
          {
            "id": "cosmy-wasmy.accounts.refresh",
            "title": "Refresh account view",
            "description": "Click on the $(refresh) Refresh icon to refresh all the account balances. \n[Refresh Accounts](command:cosmy-wasmy.refreshAccount)",
            "completionEvents": [
              "onCommand:cosmy-wasmy.refreshAccount"
            ],
            "media": {
              "image": "walkthrough/account/refresh.gif",
              "altText": "How to refresh account view"
            }
          }
        ]
      },
      {
        "id": "cosmy-wasmy.contracts",
        "title": "Cosmy Wasmy: Contracts",
        "description": "Discover how to use Contracts in Cosmy Wasmy and what all it offers",
        "steps": [
          {
            "id": "cosmy-wasmy.contracts.import",
            "title": "Import Contract",
            "description": "Import a contract which have already been deployed by its bech32 address. \n[Import Contract](command:cosmy-wasmy.addContract)",
            "completionEvents": [
              "onCommand:cosmy-wasmy.addContract"
            ],
            "media": {
              "image": "walkthrough/contract/import.gif",
              "altText": "How to import a contract"
            }
          },
          {
            "id": "cosmy-wasmy.contracts.notes",
            "title": "Add notes",
            "description": "You can add personal notes and comments $(comment) to contracts. This information is only stored by the extension and is not stored on chain",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/contract/notes.gif",
              "altText": "How to add notes to a contract"
            }
          },
          {
            "id": "cosmy-wasmy.contracts.copyAddr",
            "title": "Copy contract address",
            "description": "Right click on a contract to get the option to copy the address into your $(clippy) clipboard",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/contract/copyAddr.gif",
              "altText": "How to copy a contract address"
            }
          },
          {
            "id": "cosmy-wasmy.contracts.checksum",
            "title": "Retreive checksum",
            "description": "If you would like to verify the checksum of any contract, you can right click on the contract to get the option to Display Checksum",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/contract/checksum.gif",
              "altText": "How to display contract checksum"
            }
          },
          {
            "id": "cosmy-wasmy.contracts.binary",
            "title": "Download contract binary",
            "description": "Right click on the contract in the Contract view to view the option to Download the contract binary. This will fetch the contract from the chain and store it locally at the root of your repository.",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/contract/binary.gif",
              "altText": "How to download contract binary"
            }
          },
          {
            "id": "cosmy-wasmy.contracts.adminChange",
            "title": "Update or clear admin",
            "description": "Right click on the contract to get the option to update the current contract admin or clear the contarct admin. You can only do this with the current contract admin account",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/contract/admin.gif",
              "altText": "How to clear or change admin"
            }
          },
          {
            "id": "cosmy-wasmy.contracts.deleteContract",
            "title": "Delete contract",
            "description": "Right click on an account to get the option to delete the contract from the extension. \n❗Contract is only removed from the Cosmy Wasmy vscode extension. The contract and its state continues to persist on chain.",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/contract/delete.gif",
              "altText": "How to delete a contract"
            }
          },
          {
            "id": "cosmy-wasmy.contracts.upload",
            "title": "Upload a new contract code",
            "description": "Select an account from the Account view to use to upload the contract. Click on the $(cloud-upload) upload contract icon or right click on a wasm binary file and click on ``Upload Contract`` menu item to upload the contract to the selected chain.",
            "completionEvents": [
              "onCommand:cosmy-wasmy.upload"
            ],
            "media": {
              "image": "walkthrough/contract/upload.gif",
              "altText": "How to upload a contract code"
            }
          }
        ]
      },
      {
        "id": "cosmy-wasmy.notebooks",
        "title": "Cosmy Wasmy: CW Notebooks",
        "description": "Discover how to use CW Notebooks in Cosmy Wasmy",
        "steps": [
          {
            "id": "cosmy-wasmy.notebook.new",
            "title": "Create or open a CW Notebook",
            "description": "Right click in the file explorer and create a new file with an ``.cwnotebook`` extension. Or, open the [Command Palette](command:workbench.action.showCommands) and run the command \n\n[Create New CW Notebook](command:cosmy-wasmy.createCwNotebook)",
            "completionEvents": [
              "onCommand:cosmy-wasmy.createCwNotebook",
              "onCommand:workbench.action.files.openFolder",
              "onCommand:workbench.action.files.openFileFolder"
            ],
            "media": {
              "image": "walkthrough/notebooks/create.gif",
              "altText": "How to create a new CW notebook"
            }
          },
          {
            "id": "cosmy-wasmy.notebook.setup",
            "title": "Setup your notebook",
            "description": "You can setup which wasm binary and schema is used by the Cosmwasm VM in a TOML code block",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/notebooks/setup.gif",
              "altText": "How to setup a new CW notebook"
            }
          },
          {
            "id": "cosmy-wasmy.notebook.run",
            "title": "Run your notebook",
            "description": "You can run the json blocks in the CW Notebook to execute against a Cosmwasm VM. You can instantiate contracts and query and execute messages",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/notebooks/run.gif",
              "altText": "How to run a CW notebook"
            }
          }
        ]
      },
      {
        "id": "cosmy-wasmy.cosmwasm",
        "title": "Cosmy Wasmy: Cosmwasm Interactions",
        "description": "Discover how to interact with Cosmwasm Contracts in Cosmy Wasmy",
        "steps": [
          {
            "id": "cosmy-wasmy.cosmwasm.initialize",
            "title": "Initialize a contract",
            "description": "Once a contract has been uploaded you can initialize it using the sidebar. You need to select an account in the Account view which will be used to initialize the contract. You need to provide the Code Id and input message and optionally, any funds you might wanna send to the contract",
            "completionEvents": [
              "onView:intialize"
            ],
            "media": {
              "image": "walkthrough/cosmwasm/intialize.gif",
              "altText": "How to initialize a smart contract"
            }
          },
          {
            "id": "cosmy-wasmy.cosmwasm.query",
            "title": "Query a contract",
            "description": "Click on any contract in the Contract view and pass in input json in the Query view to run the given query against the selected contract",
            "completionEvents": [
              "onView:query"
            ],
            "media": {
              "image": "walkthrough/cosmwasm/query.gif",
              "altText": "How to query a smart contract"
            }
          },
          {
            "id": "cosmy-wasmy.cosmwasm.execute",
            "title": "Execute a contract",
            "description": "Select a contract from the Contract view and an account from the Account view as currently active contract and account and input your execute json and click on ``Execute`` button to execute the contract tx.\nYou can also pass in funds if your contract requires any.\nThe response from the contract is shown in the Output channel and you can see the txHash in the notification.",
            "completionEvents": [
              "onView:execute"
            ],
            "media": {
              "image": "walkthrough/cosmwasm/execute.gif",
              "altText": "How to execute a smart a contract"
            }
          },
          {
            "id": "cosmy-wasmy.cosmwasm.autocomplete",
            "title": "Get JSON input autocomplete",
            "description": "Once your project has been loaded, run ``cargo schema`` to generate the json schema for the contract. Now open any new JSON file and you can get the json input auto complete for your contract. \nYou can click on the top right button on the JSON page to execute or query the smart contract right from the file",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/cosmwasm/autocomplete.gif",
              "altText": "How to autocomplete JSON inputs"
            }
          },
          {
            "id": "cosmy-wasmy.cosmwasm.history",
            "title": "Get your past contract interactions",
            "description": "Based on the configured settings, you can choose to store your latest cosmwasm interactions like query and execute.\nClick in the $(history) on the ``Query`` or ``Execute`` view to load the history. The inputs of the interaction are stored and the historical interaction can be re-run from the History view",
            "completionEvents": [
              "onStepSelected"
            ],
            "media": {
              "image": "walkthrough/cosmwasm/history.gif",
              "altText": "How to view past Cosmwasm interactions"
            }
          }
        ]
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "webpack",
    "watch": "webpack --watch",
    "package": "webpack --mode production --devtool hidden-source-map",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "npm run compile-tests && npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/glob": "^7.2.0",
    "@types/mocha": "^9.1.1",
    "@types/node": "14.x",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^5.21.0",
    "@typescript-eslint/parser": "^5.21.0",
    "@vscode/test-electron": "^2.1.3",
    "eslint": "^8.14.0",
    "glob": "^8.0.1",
    "mocha": "^9.2.2",
    "ts-loader": "^9.2.8",
    "typescript": "^4.6.4",
    "webpack": "^5.70.0",
    "webpack-cli": "^4.9.2"
  },
  "dependencies": {
    "@cosmjs/amino": "^0.29.5",
    "@cosmjs/cosmwasm-stargate": "^0.29.5",
    "@cosmjs/faucet-client": "^0.29.5",
    "@cosmjs/launchpad": "^0.27.1",
    "@cosmjs/proto-signing": "^0.29.5",
    "@terran-one/cw-simulate": "^2.8.0",
    "@vscode/l10n": "^0.0.10",
    "@vscode/l10n-dev": "^0.0.22",
    "@vscode/webview-ui-toolkit": "^1.2.0",
    "cross-fetch": "^3.1.5",
    "json-schema-faker": "^0.5.0-rcv.46",
    "node-fetch": "^3.3.0",
    "toml": "^3.0.0"
  }
}
